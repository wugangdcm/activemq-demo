如何保证消息可靠性
1、事务
connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
第一个参数是否开启事务 第二个参数是否自动签收
事务偏生产者 签收偏消费者
生产者开启事务后，执行了send后需要执行commit，消息才真正被提交到队列中
session.commit() 在session.close()之前提交事务


2、持久性（默认是持久的）
int NON_PERSISTENT = 1;
int PERSISTENT = 2;
持久：当服务器宕机 消息依然存在
messageProducer.setDeliveryMode(DeliveryMode.PERSISTENT);
非持久：当服务器宕机 消息不存在
messageProducer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);

3、签收
connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
int AUTO_ACKNOWLEDGE = 1; 自动签收
int CLIENT_ACKNOWLEDGE = 2;手动签收
int DUPS_OK_ACKNOWLEDGE = 3;允许重复消费
int SESSION_TRANSACTED = 0;
如果消费者设置的是手动签收，那么获取到消息时，需要手动ack确认告诉服务器
textMessage.acknowledge();
当设置了事务为true时，签收即使是手动签收模式，也会以事务优先自动签收。

传输协议：默认五种
<transportConnector name="openwire" uri="tcp://0.0.0.0:61616?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
<transportConnector name="amqp" uri="amqp://0.0.0.0:5672?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
<transportConnector name="stomp" uri="stomp://0.0.0.0:61613?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
<transportConnector name="mqtt" uri="mqtt://0.0.0.0:1883?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
<transportConnector name="ws" uri="ws://0.0.0.0:61614?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
支持nio配置 需要自己加入 适合多客户端连接
<transportConnector name="nio" uri="nio://0.0.0.0:61618?trace=true"/>

MQ持久化机制：
<persistenceAdapter>
  <kahaDB directory="${activemq.data}/kahadb"/>
</persistenceAdapter>

MQ异步投递：
tcp://192.168.1.101:61616?jms.useAsyncSend=true
connectionFactory.setUseAsyncSend(true);

在回调函数中处理消息是否发送成功 失败的消息需要记录
//具体消息以及发送
TextMessage textMessage = session.createTextMessage("queue msg " + i);
final String msgId = "每个消息的唯一ID" + UUID.randomUUID().toString();
activeMQMessageProducer.send(textMessage, new AsyncCallback() {
    public void onSuccess() {
        System.out.println("发送成功的消息id"+msgId);
    }

    public void onException(JMSException e) {
        System.out.println("发送失败的消息id"+msgId);
    }
});
延时投递和定时投递
修改配置文件 支持定时投递  schedulerSupport="true"
<broker xmlns="http://activemq.apache.org/schema/core" brokerName="localhost" dataDirectory="${activemq.data}" schedulerSupport="true">
textMessage.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, AMQ_scheduled_delay);
textMessage.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_PERIOD, AMQ_scheduled_period);
textMessage.setIntProperty(ScheduledMessage.AMQ_SCHEDULED_REPEAT, AMQ_scheduled_repeat);

MQ消息重试机制：
具体哪些情况会引起消息重发 mq服务器->client
1、Client用了transactions且在session中调用了rolleback()
2、Client用了transactions且在commit()之前关闭或者没有commit
3、Client在CLIENT_ACKNOWLEDGE的传递模式下，在session中调用了recover()
请说说消息重发时间间隔和重发次数
initialRedeliveryDelay：1
maximumRedeliveries: 6
有毒消息poison ACK谈谈你的理解
一个消息被redelivedred超过默认的最大重发次数(6)时，消息端会给MQ发送个poison ack，
告诉broker不要再发了，这个时候broker会把这个消息放大DLQ(死信队列)

MQ死信队列：
默认情况下，mq不会把非持久的死消息发送到死信队列中。
非持久话消息也要放入死信队列中，需要设置属性 processNonPersistent="true"
过期的消息不放入死信队列 默认为true 需要配置 processExpired="false"
<policyEntry queue=">">
    <deadLetterStrategy>
        <sharedDeadLetterStrategy processNonPersistent="true" processExpired="false">
    </deadLetterStrategy>
</policyEntry>

如何保证消息不被重复消费：
实现方式有多中，
1、入库方式，以消息id为主键记录，发现记录存在就不处理(不常用)
2、redis记录，记录消息的唯一值当做key存下,下次消费的时候判断redis中是否存在即可(常用的)








